/*
设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val?和?next。val?是当前节点的值，next?是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性?prev?以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。

在链表类中实现这些功能：

get(index)：获取链表中第?index?个节点的值。如果索引无效，则返回-1。
addAtHead(val)：在链表的第一个元素之前添加一个值为?val?的节点。插入后，新节点将成为链表的第一个节点。
addAtTail(val)：将值为?val 的节点追加到链表的最后一个元素。
addAtIndex(index,val)：在链表中的第?index?个节点之前添加值为?val? 的节点。如果?index?等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。
deleteAtIndex(index)：如果索引?index 有效，则删除链表中的第?index 个节点。
?

*/

class MyLinkedList {
	public:
		MyLinkedList() {
			this->size = 0;
			this->head = new ListNode(0);
		}

		int get(int index) {
			if(index<0||index>=size) {
				return  -1;
			}
			ListNode* cur = head;
			for(int i =0; i<=index; i++) {
				cur = cur->next;
			}
			return cur->val;

		}

		void addAtHead(int val) {
			addAtIndex(0,val);
		}

		void addAtTail(int val) {
			addAtIndex(size,val);
		}

		void addAtIndex(int index, int val) {
			if(index>size) return;

			index= max(0,index);
			size++;
			ListNode *pred = head;
			for(int i = 0; i<index; i++) {
				pred = pred->next;
			}

			ListNode  *toAdd = new ListNode(val);
			toAdd->next = pred->next;
			pred->next = toAdd;



		}

		void deleteAtIndex(int index) {
			if(index<0||index>=size) return;
			size--;
			ListNode *pred = head;
			for(int i = 0; i<index; i++) {
				pred = pred->next;
			}

			ListNode *p = pred->next;
			pred->next = pred->next->next;
			delete p;

		}

	private:
		int size;
		ListNode *head;
};

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */
